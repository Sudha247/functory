##########################################################################
#                                                                        #
#  Copyright (C) Jean-Christophe Filliatre and Kalyan Krishnamani        #
#                                                                        #
#  This software is free software; you can redistribute it and/or        #
#  modify it under the terms of the GNU Library General Public           #
#  License version 2.1, with the special exception on linking            #
#  described in file LICENSE.                                            #
#                                                                        #
#  This software is distributed in the hope that it will be useful,      #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  #
#                                                                        #
##########################################################################

# where to install the binaries
prefix=@prefix@
exec_prefix=@exec_prefix@
BINDIR=@bindir@
LIBDIR=@OCAMLLIB@/mapreduce

# where to install the man page
MANDIR=@mandir@

# other variables set by ./configure
OCAMLC   = @OCAMLC@
OCAMLOPT = @OCAMLOPT@
OCAMLDEP = @OCAMLDEP@
OCAMLLEX = @OCAMLLEX@
OCAMLYACC= @OCAMLYACC@
OCAMLLIB = @OCAMLLIB@
OCAMLBEST= @OCAMLBEST@
OCAMLVERSION = @OCAMLVERSION@
OCAMLWEB = @OCAMLWEB@
OCAMLWIN32 = @OCAMLWIN32@
EXE = @EXE@

INCLUDES = 
BFLAGS = -g $(INCLUDES)
OFLAGS = $(INCLUDES) -for-pack Mapreduce

# main target
#############

NAME = mapreduce

CMA  = mapreduce.cma
CMXA = mapreduce.cmxa

all: $(OCAMLBEST)
byte: $(CMA) worker_test.byte master_test.byte
opt: $(CMA) $(CMXA) worker_test.opt master_test.opt

# bytecode and native-code compilation
######################################

CMO = control.cmo simple.cmo master.cmo cores.cmo binary.cmo protocol.cmo \
      network.cmo
CMX = $(CMO:.cmo=.cmx)

GENERATED = version.ml

$(CMA): mapreduce.cmo
	$(OCAMLC) -a $(BFLAGS) -o $@ $^

$(CMXA): mapreduce.cmx
	$(OCAMLOPT) -a $(OFLAGS) -o $@ $^

mapreduce.cmo: mapreduce.cmi
mapreduce.cmo: $(CMO)
	$(OCAMLC) $(INCLUDES) -pack -o $@ $(CMO)

mapreduce.cmx: mapreduce.cmi
mapreduce.cmx: $(CMX)
	$(OCAMLOPT) $(INCLUDES) -pack -o $@ $(CMX)

WTCMO = worker_test.cmo
WTCMX = $(WTCMO:.cmo=.cmx)

worker_test.byte: $(CMA) $(WTCMO)
	$(OCAMLC) $(INCLUDES) -o $@ unix.cma $^

worker_test.cmx: mapreduce.cmi
worker_test.opt: $(CMXA) $(WTCMX)
	$(OCAMLOPT) $(INCLUDES) -o $@ unix.cmxa $(CMXA) $(WTCMX)

MTCMO = master_test.cmo
MTCMX = $(MTCMO:.cmo=.cmx)

master_test.byte: $(CMA) $(MTCMO)
	$(OCAMLC) $(INCLUDES) -o $@ unix.cma $^

master_test.opt: $(CMXA) $(MTCMX)
	$(OCAMLOPT) $(INCLUDES) -o $@ unix.cmxa $^

VERSION=0.1

version.ml: Makefile
	echo "let version = \""$(VERSION)"\"" > version.ml
	echo "let date = \""`date`"\"" >> version.ml

# tests
#######

test: tests/n-queens/a.out tests/sums/a.out
	tests/n-queens/a.out
	tests/sums/a.out

tests/%/a.out: tests/%/main.ml mapreduce.cmxa
	cd tests/$*; $(OCAMLOPT) -I ../.. unix.cmxa mapreduce.cmxa main.ml

wc:
	ocamlwc -p *.ml* tests/*/*.ml*

# installation
##############

install: install-$(OCAMLBEST)

BCMA = $(addprefix $(BUILD), $(CMA))
BCMXA = $(addprefix $(BUILD), $(CMXA))

install-byte: 
	mkdir -p $(LIBDIR)
	cp -f $(BUILD)mapreduce.cmi $(BCMA) "$(LIBDIR)"

install-opt: 
	mkdir -p $(LIBDIR)
	cp -f $(BUILD)mapreduce.cmi  $(BCMA) "$(LIBDIR)"
	cp -f $(BCMXA) "$(LIBDIR)"

# documentation
###############

doc: mapreduce.mli
	mkdir -p doc
	ocamldoc -html -hide Mapreduce -d doc mapreduce.mli

# export
########

EXPORTDIR=$(NAME)-$(VERSION)
TAR=$(EXPORTDIR).tar

FTP = $$HOME/ftp/$(NAME)
WWW = $$HOME/WWW/$(NAME)

FILES = *.ml* \
	Makefile.in configure configure.in   \
	.depend README.txt LICENSE

export: source binary export-doc
	cp README COPYING GPL CHANGES $(FTP)

source: 
	mkdir -p export/$(EXPORTDIR)
	cp $(FILES) export/$(EXPORTDIR)
	cd export ; tar cf $(TAR) $(EXPORTDIR) ; gzip -f --best $(TAR)
	cp export/$(TAR).gz $(FTP)

export-doc: $(DOCFILES)
	gzip -c manual.ps > $(FTP)/manual.ps.gz
	cp manual.html $(WWW)

BINARY = $(EXPORTDIR)-$(OSTYPE)
BINARYTAR=$(BINARY).tar

BINARYFILES = README INSTALL COPYING GPL $(NAME).1

binary: $(NAME).$(OCAMLBEST) $(DOCFILES)
	mkdir -p export/$(BINARY)
	cp $(BINARYFILES) $(DOCFILES) export/$(BINARY)
	cp $(NAME).$(OCAMLBEST) export/$(BINARY)/$(NAME)
	(cd export; tar czf $(BINARY).tar.gz $(BINARY))
	cp export/$(BINARY).tar.gz $(FTP)

# generic rules
###############

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly .tex .dvi .ps .html

.mli.cmi:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.cmo:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.o:
	$(OCAMLOPT) -c $(OFLAGS) $<

.ml.cmx:
	$(OCAMLOPT) -c $(OFLAGS) $<

.mll.ml:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) -v $<

.mly.mli:
	$(OCAMLYACC) -v $<

.tex.dvi:
	latex $< && latex $<

.dvi.ps:
	dvips $< -o $@ 

.tex.html:
	hevea $<

# headers
#########

headers:
	headache -c misc/headache_config.txt -h misc/header.txt \
	 *.in README.txt *.mli *.ml tests/*/*.ml
	./config.status

# Emacs tags
############

tags:
	find . -name "*.ml*" | sort -r | xargs \
	etags "--regex=/let[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/let[ \t]+rec[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/and[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/type[ \t]+\([^ \t]+\)/\1/" \
              "--regex=/exception[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/val[ \t]+\([^ \t]+\)/\1/" \
	      "--regex=/module[ \t]+\([^ \t]+\)/\1/"

# Makefile is rebuilt whenever Makefile.in or configure.in is modified
######################################################################

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf 

# clean
#######

clean::
	rm -f *.cm[iox] *.o *~
	rm -f $(GENERATED) parser.output
	rm -f $(NAME).byte $(NAME).opt
	rm -f *.aux *.log $(NAME).tex $(NAME).dvi $(NAME).ps

dist-clean distclean:: clean
	rm -f Makefile config.cache config.log config.status

# depend
########

.depend depend:: $(GENERATED)
	rm -f .depend
	$(OCAMLDEP) $(INCLUDES) *.ml *.mli > .depend

include .depend
